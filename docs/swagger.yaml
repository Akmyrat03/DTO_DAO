basePath: /api
definitions:
  dto.UserRequest:
    properties:
      password:
        example: securepassword
        type: string
      username:
        example: johndoe
        type: string
    required:
    - password
    - username
    type: object
  dto.UserResponse:
    properties:
      id:
        type: integer
      username:
        type: string
    type: object
  handler.errResponse:
    properties:
      message:
        type: string
    type: object
host: localhost:8000
info:
  contact: {}
  description: This is a sample API for managing users
  title: User Management API
  version: "1.0"
paths:
  /users/{id}:
    delete:
      description: delete user by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: User deleted successfully
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.errResponse'
      summary: delete user
      tags:
      - User
    get:
      description: get user by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.UserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.errResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.errResponse'
      summary: get user by ID
      tags:
      - User
  /users/all:
    get:
      description: get all users
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.UserResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.errResponse'
      summary: get all users
      tags:
      - User
  /users/create:
    post:
      consumes:
      - application/json
      description: Create a new user by providing the username and password
      parameters:
      - description: User
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.UserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.UserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.errResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.errResponse'
      summary: Create a new user
      tags:
      - User
swagger: "2.0"
